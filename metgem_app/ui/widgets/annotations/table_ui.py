# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'E:\git\metgem\metgem_app\ui\widgets\annotations\table.ui',
# licensing of 'E:\git\metgem\metgem_app\ui\widgets\annotations\table.ui' applies.
#
# Created: Sat Mar  5 14:43:08 2022
#      by: pyside2-uic  running on PySide2 5.13.2
#
# WARNING! All changes made in this file will be lost!

from PySide2 import QtCore, QtGui, QtWidgets

class Ui_AnnotationsWidget(object):
    def setupUi(self, AnnotationsWidget):
        AnnotationsWidget.setObjectName("AnnotationsWidget")
        AnnotationsWidget.resize(825, 412)
        AnnotationsWidget.setWindowTitle("")
        self.verticalLayout = QtWidgets.QVBoxLayout(AnnotationsWidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tvAnnotations = QtWidgets.QTableView(AnnotationsWidget)
        self.tvAnnotations.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.tvAnnotations.setAlternatingRowColors(True)
        self.tvAnnotations.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.tvAnnotations.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tvAnnotations.setSortingEnabled(True)
        self.tvAnnotations.setObjectName("tvAnnotations")
        self.tvAnnotations.horizontalHeader().setStretchLastSection(True)
        self.verticalLayout.addWidget(self.tvAnnotations)
        self.actionViewSpectrum = QtWidgets.QAction(AnnotationsWidget)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/images/spectrum.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionViewSpectrum.setIcon(icon)
        self.actionViewSpectrum.setObjectName("actionViewSpectrum")
        self.actionViewCompareSpectrum = QtWidgets.QAction(AnnotationsWidget)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/images/spectrum-inverted.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionViewCompareSpectrum.setIcon(icon1)
        self.actionViewCompareSpectrum.setObjectName("actionViewCompareSpectrum")
        self.actionFindStandards = QtWidgets.QAction(AnnotationsWidget)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/images/library-query.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFindStandards.setIcon(icon2)
        self.actionFindStandards.setObjectName("actionFindStandards")
        self.actionFindAnalogs = QtWidgets.QAction(AnnotationsWidget)
        self.actionFindAnalogs.setIcon(icon2)
        self.actionFindAnalogs.setObjectName("actionFindAnalogs")
        self.actionResetPieColorMapping = QtWidgets.QAction(AnnotationsWidget)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/images/node-empty.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionResetPieColorMapping.setIcon(icon3)
        self.actionResetPieColorMapping.setObjectName("actionResetPieColorMapping")
        self.actionUseColumnsForPieCharts = QtWidgets.QAction(AnnotationsWidget)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/images/node-pie.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionUseColumnsForPieCharts.setIcon(icon4)
        self.actionUseColumnsForPieCharts.setObjectName("actionUseColumnsForPieCharts")
        self.actionResetLabelMapping = QtWidgets.QAction(AnnotationsWidget)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/images/node-label.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionResetLabelMapping.setIcon(icon5)
        self.actionResetLabelMapping.setObjectName("actionResetLabelMapping")
        self.actionUseColumnForLabels = QtWidgets.QAction(AnnotationsWidget)
        self.actionUseColumnForLabels.setIcon(icon5)
        self.actionUseColumnForLabels.setObjectName("actionUseColumnForLabels")
        self.actionResetSizeMapping = QtWidgets.QAction(AnnotationsWidget)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/images/node-size.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionResetSizeMapping.setIcon(icon6)
        self.actionResetSizeMapping.setObjectName("actionResetSizeMapping")
        self.actionUseColumnForNodesSizes = QtWidgets.QAction(AnnotationsWidget)
        self.actionUseColumnForNodesSizes.setIcon(icon6)
        self.actionUseColumnForNodesSizes.setObjectName("actionUseColumnForNodesSizes")
        self.actionResetColorMapping = QtWidgets.QAction(AnnotationsWidget)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/images/node-color.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionResetColorMapping.setIcon(icon7)
        self.actionResetColorMapping.setObjectName("actionResetColorMapping")
        self.actionUseColumnForNodesColors = QtWidgets.QAction(AnnotationsWidget)
        self.actionUseColumnForNodesColors.setIcon(icon7)
        self.actionUseColumnForNodesColors.setObjectName("actionUseColumnForNodesColors")
        self.actionHighlightSelectedNodes = QtWidgets.QAction(AnnotationsWidget)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/icons/images/highlight-yellow.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionHighlightSelectedNodes.setIcon(icon8)
        self.actionHighlightSelectedNodes.setObjectName("actionHighlightSelectedNodes")
        self.actionAddColumnsByFormulae = QtWidgets.QAction(AnnotationsWidget)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/icons/images/calculator.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddColumnsByFormulae.setIcon(icon9)
        self.actionAddColumnsByFormulae.setObjectName("actionAddColumnsByFormulae")
        self.actionClusterize = QtWidgets.QAction(AnnotationsWidget)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/icons/images/cluster.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClusterize.setIcon(icon10)
        self.actionClusterize.setObjectName("actionClusterize")
        self.actionDeleteColumns = QtWidgets.QAction(AnnotationsWidget)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/icons/images/list-remove.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDeleteColumns.setIcon(icon11)
        self.actionDeleteColumns.setObjectName("actionDeleteColumns")
        self.actionFreezeColumns = QtWidgets.QAction(AnnotationsWidget)
        self.actionFreezeColumns.setCheckable(True)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/icons/images/freeze_columns.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFreezeColumns.setIcon(icon12)
        self.actionFreezeColumns.setObjectName("actionFreezeColumns")
        self.actionFreezeFirstColumn = QtWidgets.QAction(AnnotationsWidget)
        self.actionFreezeFirstColumn.setCheckable(True)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/icons/images/freeze_first_column.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFreezeFirstColumn.setIcon(icon13)
        self.actionFreezeFirstColumn.setObjectName("actionFreezeFirstColumn")
        self.actionSetAlternatingRowColors = QtWidgets.QAction(AnnotationsWidget)
        self.actionSetAlternatingRowColors.setCheckable(True)
        self.actionSetAlternatingRowColors.setChecked(True)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/icons/images/alternating_row_colors.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSetAlternatingRowColors.setIcon(icon14)
        self.actionSetAlternatingRowColors.setObjectName("actionSetAlternatingRowColors")
        self.actionEnableOrdering = QtWidgets.QAction(AnnotationsWidget)
        self.actionEnableOrdering.setCheckable(True)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(":/icons/images/enable_ordering.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEnableOrdering.setIcon(icon15)
        self.actionEnableOrdering.setObjectName("actionEnableOrdering")
        self.actionSetColumnsMovable = QtWidgets.QAction(AnnotationsWidget)
        self.actionSetColumnsMovable.setCheckable(True)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(":/icons/images/enable_move_columns.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSetColumnsMovable.setIcon(icon16)
        self.actionSetColumnsMovable.setObjectName("actionSetColumnsMovable")

        self.retranslateUi(AnnotationsWidget)
        QtCore.QMetaObject.connectSlotsByName(AnnotationsWidget)

    def retranslateUi(self, AnnotationsWidget):
        self.actionViewSpectrum.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "View Spectrum", None, -1))
        self.actionViewSpectrum.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Show the spectrum associated to the selected node", None, -1))
        self.actionViewSpectrum.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Show the spectrum associated to the selected node", None, -1))
        self.actionViewCompareSpectrum.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Compare Spectrum", None, -1))
        self.actionViewCompareSpectrum.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Compare the spectrum associated to the selected node to another one", None, -1))
        self.actionViewCompareSpectrum.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Compare the spectrum associated to the selected node to another one", None, -1))
        self.actionFindStandards.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Find standards in library", None, -1))
        self.actionFindStandards.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Search for known spectra in library similar to the selected nodes\' spectra with same precursor ion", None, -1))
        self.actionFindStandards.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Search for known spectra in library similar to the selected nodes\' spectra with same precursor ion", None, -1))
        self.actionFindAnalogs.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Find analogs in library", None, -1))
        self.actionFindAnalogs.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Search for known spectra in library similar to the selected nodes\' spectra with different precursor ion", None, -1))
        self.actionFindAnalogs.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Search for known spectra in library similar to the selected nodes\' spectra with different precursor ion", None, -1))
        self.actionResetPieColorMapping.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Reset color mapping", None, -1))
        self.actionResetPieColorMapping.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Remove pie charts", None, -1))
        self.actionResetPieColorMapping.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Remove pie charts", None, -1))
        self.actionUseColumnsForPieCharts.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Use Columns for Pie Charts", None, -1))
        self.actionUseColumnsForPieCharts.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Use selected columns as source for nodes\' pie charts", None, -1))
        self.actionUseColumnsForPieCharts.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Use selected columns as source for nodes\' pie charts", None, -1))
        self.actionResetLabelMapping.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Reset label mapping", None, -1))
        self.actionResetLabelMapping.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Restore default nodes\' labels", None, -1))
        self.actionResetLabelMapping.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Restore default nodes\' labels", None, -1))
        self.actionUseColumnForLabels.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Use Column for Labels", None, -1))
        self.actionUseColumnForLabels.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Use selected column as source for nodes\' labels", None, -1))
        self.actionUseColumnForLabels.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Use selected column as source for nodes\' labels", None, -1))
        self.actionResetSizeMapping.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Reset size mapping", None, -1))
        self.actionResetSizeMapping.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Restore default nodes\' sizes", None, -1))
        self.actionResetSizeMapping.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Restore default nodes\' sizes", None, -1))
        self.actionUseColumnForNodesSizes.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Use Column for Nodes Sizes", None, -1))
        self.actionUseColumnForNodesSizes.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Use selected column as source for nodes\' sizes", None, -1))
        self.actionUseColumnForNodesSizes.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Use selected column as source for nodes\' sizes", None, -1))
        self.actionResetColorMapping.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Reset color mapping", None, -1))
        self.actionResetColorMapping.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Restore default nodes\' colors", None, -1))
        self.actionResetColorMapping.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Restore default nodes\' colors", None, -1))
        self.actionUseColumnForNodesColors.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Use Column for Nodes Colors", None, -1))
        self.actionUseColumnForNodesColors.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Use selected column as source for nodes\' colors", None, -1))
        self.actionUseColumnForNodesColors.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Use selected column as source for nodes\' colors", None, -1))
        self.actionHighlightSelectedNodes.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Highlight Selected Nodes", None, -1))
        self.actionHighlightSelectedNodes.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Highlight in network views the selected nodes in the table", None, -1))
        self.actionHighlightSelectedNodes.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Highlight in network views the selected nodes in the table", None, -1))
        self.actionAddColumnsByFormulae.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Add new columns by formulae", None, -1))
        self.actionAddColumnsByFormulae.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Add new columns by combining existing ones using arithmetic formula", None, -1))
        self.actionAddColumnsByFormulae.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Add new columns by combining existing ones using arithmetic formula", None, -1))
        self.actionClusterize.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Clusterize", None, -1))
        self.actionClusterize.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Find clusters in data and put each node in a cluster", None, -1))
        self.actionClusterize.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Find clusters in data and put each node in a cluster", None, -1))
        self.actionDeleteColumns.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Delete Columns", None, -1))
        self.actionDeleteColumns.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Remove selected columns", None, -1))
        self.actionDeleteColumns.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Remove selected columns", None, -1))
        self.actionFreezeColumns.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Freeze Columns", None, -1))
        self.actionFreezeColumns.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Freeze the columns to the left of the selected one", None, -1))
        self.actionFreezeColumns.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Freeze the columns to the left of the selected one", None, -1))
        self.actionFreezeFirstColumn.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Freeze First Column", None, -1))
        self.actionFreezeFirstColumn.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Freeze the first column of the table", None, -1))
        self.actionFreezeFirstColumn.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Freeze the first column of the table", None, -1))
        self.actionSetAlternatingRowColors.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Set Alternating Row Colors", None, -1))
        self.actionSetAlternatingRowColors.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Alternate background colors in table to improve readability", None, -1))
        self.actionSetAlternatingRowColors.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Alternate background colors in table to improve readability", None, -1))
        self.actionEnableOrdering.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Enable Ordering", None, -1))
        self.actionEnableOrdering.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Enable ordering of table. Selection of columns is available only when sorting is disabled", None, -1))
        self.actionEnableOrdering.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Enable ordering of table. Selection of columns is available only when sorting is disabled", None, -1))
        self.actionSetColumnsMovable.setText(QtWidgets.QApplication.translate("AnnotationsWidget", "Set Columns Movable", None, -1))
        self.actionSetColumnsMovable.setToolTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Allow to change order of columns", None, -1))
        self.actionSetColumnsMovable.setStatusTip(QtWidgets.QApplication.translate("AnnotationsWidget", "Allow to change order of columns", None, -1))

import ui_rc
