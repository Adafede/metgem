# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'E:\git\metgem\metgem_app\ui\main_window.ui',
# licensing of 'E:\git\metgem\metgem_app\ui\main_window.ui' applies.
#
# Created: Sat Mar  5 14:42:54 2022
#      by: pyside2-uic  running on PySide2 5.13.2
#
# WARNING! All changes made in this file will be lost!

from PySide2 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1444, 770)
        MainWindow.setWindowTitle("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/images/main.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setDockNestingEnabled(True)
        MainWindow.setDockOptions(QtWidgets.QMainWindow.AllowNestedDocks|QtWidgets.QMainWindow.AllowTabbedDocks|QtWidgets.QMainWindow.AnimatedDocks)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1444, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuAbout = QtWidgets.QMenu(self.menubar)
        self.menuAbout.setObjectName("menuAbout")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")
        self.menu_Network = QtWidgets.QMenu(self.menubar)
        self.menu_Network.setObjectName("menu_Network")
        self.menu_Databases = QtWidgets.QMenu(self.menubar)
        self.menu_Databases.setObjectName("menu_Databases")
        self.menu_Plugins = QtWidgets.QMenu(self.menubar)
        self.menu_Plugins.setObjectName("menu_Plugins")
        self.menu_Annotations = QtWidgets.QMenu(self.menubar)
        self.menu_Annotations.setObjectName("menu_Annotations")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.tbFile = QtWidgets.QToolBar(MainWindow)
        self.tbFile.setObjectName("tbFile")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.tbFile)
        self.tbView = QtWidgets.QToolBar(MainWindow)
        self.tbView.setObjectName("tbView")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.tbView)
        self.tbNetwork = QtWidgets.QToolBar(MainWindow)
        self.tbNetwork.setObjectName("tbNetwork")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.tbNetwork)
        self.tbExport = QtWidgets.QToolBar(MainWindow)
        self.tbExport.setObjectName("tbExport")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.tbExport)
        self.tbDatabase = QtWidgets.QToolBar(MainWindow)
        self.tbDatabase.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.tbDatabase.setObjectName("tbDatabase")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.tbDatabase)
        self.tbAnnotations = QtWidgets.QToolBar(MainWindow)
        self.tbAnnotations.setObjectName("tbAnnotations")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.tbAnnotations)
        self.tbSearch = QtWidgets.QToolBar(MainWindow)
        self.tbSearch.setObjectName("tbSearch")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.tbSearch)
        self.actionProcessFile = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/images/import-mgf.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionProcessFile.setIcon(icon1)
        self.actionProcessFile.setObjectName("actionProcessFile")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/images/close.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionQuit.setIcon(icon2)
        self.actionQuit.setObjectName("actionQuit")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setIcon(icon)
        self.actionAbout.setObjectName("actionAbout")
        self.actionAboutQt = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/images/qt-logo.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAboutQt.setIcon(icon3)
        self.actionAboutQt.setObjectName("actionAboutQt")
        self.actionOpen = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/images/document-open.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpen.setIcon(icon4)
        self.actionOpen.setObjectName("actionOpen")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setEnabled(False)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/images/document-save.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSave.setIcon(icon5)
        self.actionSave.setObjectName("actionSave")
        self.actionSaveAs = QtWidgets.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/images/document-save-as.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSaveAs.setIcon(icon6)
        self.actionSaveAs.setObjectName("actionSaveAs")
        self.actionZoomIn = QtWidgets.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/images/zoom-in.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoomIn.setIcon(icon7)
        self.actionZoomIn.setObjectName("actionZoomIn")
        self.actionZoomOut = QtWidgets.QAction(MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/icons/images/zoom-out.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoomOut.setIcon(icon8)
        self.actionZoomOut.setObjectName("actionZoomOut")
        self.actionZoomToFit = QtWidgets.QAction(MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/icons/images/zoom-fit.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoomToFit.setIcon(icon9)
        self.actionZoomToFit.setObjectName("actionZoomToFit")
        self.actionZoomSelectedRegion = QtWidgets.QAction(MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/icons/images/zoom-target.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoomSelectedRegion.setIcon(icon10)
        self.actionZoomSelectedRegion.setObjectName("actionZoomSelectedRegion")
        self.actionFullScreen = QtWidgets.QAction(MainWindow)
        self.actionFullScreen.setCheckable(True)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/icons/images/fullscreen.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFullScreen.setIcon(icon11)
        self.actionFullScreen.setObjectName("actionFullScreen")
        self.actionZoomReset = QtWidgets.QAction(MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/icons/images/zoom-1.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionZoomReset.setIcon(icon12)
        self.actionZoomReset.setObjectName("actionZoomReset")
        self.actionShowAll = QtWidgets.QAction(MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/icons/images/eye.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShowAll.setIcon(icon13)
        self.actionShowAll.setObjectName("actionShowAll")
        self.actionHideSelected = QtWidgets.QAction(MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/icons/images/eye-closed.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionHideSelected.setIcon(icon14)
        self.actionHideSelected.setObjectName("actionHideSelected")
        self.actionNeighbors = QtWidgets.QAction(MainWindow)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(":/icons/images/select-neighbors.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNeighbors.setIcon(icon15)
        self.actionNeighbors.setObjectName("actionNeighbors")
        self.actionExportToCytoscape = QtWidgets.QAction(MainWindow)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(":/icons/images/cy3logoOrange.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExportToCytoscape.setIcon(icon16)
        self.actionExportToCytoscape.setObjectName("actionExportToCytoscape")
        self.actionExportAsImage = QtWidgets.QAction(MainWindow)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(":/icons/images/emblem-photos.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExportAsImage.setIcon(icon17)
        self.actionExportAsImage.setObjectName("actionExportAsImage")
        self.actionLinkViews = QtWidgets.QAction(MainWindow)
        self.actionLinkViews.setCheckable(True)
        self.actionLinkViews.setChecked(True)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap(":/icons/images/chain-link.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionLinkViews.setIcon(icon18)
        self.actionLinkViews.setObjectName("actionLinkViews")
        self.actionDownloadDatabases = QtWidgets.QAction(MainWindow)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap(":/icons/images/new-library.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDownloadDatabases.setIcon(icon19)
        self.actionDownloadDatabases.setObjectName("actionDownloadDatabases")
        self.actionViewDatabases = QtWidgets.QAction(MainWindow)
        self.actionViewDatabases.setEnabled(True)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap(":/icons/images/library.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionViewDatabases.setIcon(icon20)
        self.actionViewDatabases.setObjectName("actionViewDatabases")
        self.actionCurrentParameters = QtWidgets.QAction(MainWindow)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap(":/icons/images/info.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCurrentParameters.setIcon(icon21)
        self.actionCurrentParameters.setObjectName("actionCurrentParameters")
        self.actionImportMetadata = QtWidgets.QAction(MainWindow)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap(":/icons/images/import-metadata.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionImportMetadata.setIcon(icon22)
        self.actionImportMetadata.setObjectName("actionImportMetadata")
        self.actionNewProject = QtWidgets.QAction(MainWindow)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap(":/icons/images/new-document.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNewProject.setIcon(icon23)
        self.actionNewProject.setObjectName("actionNewProject")
        self.actionPreferences = QtWidgets.QAction(MainWindow)
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap(":/icons/images/preferences-system.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPreferences.setIcon(icon24)
        self.actionPreferences.setObjectName("actionPreferences")
        self.actionExportCurrentViewAsImage = QtWidgets.QAction(MainWindow)
        self.actionExportCurrentViewAsImage.setIcon(icon17)
        self.actionExportCurrentViewAsImage.setObjectName("actionExportCurrentViewAsImage")
        self.actionViewMiniMap = QtWidgets.QAction(MainWindow)
        self.actionViewMiniMap.setCheckable(True)
        self.actionViewMiniMap.setChecked(True)
        self.actionViewMiniMap.setObjectName("actionViewMiniMap")
        self.actionViewSpectrum = QtWidgets.QAction(MainWindow)
        icon25 = QtGui.QIcon()
        icon25.addPixmap(QtGui.QPixmap(":/icons/images/spectrum.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionViewSpectrum.setIcon(icon25)
        self.actionViewSpectrum.setObjectName("actionViewSpectrum")
        self.actionViewCompareSpectrum = QtWidgets.QAction(MainWindow)
        icon26 = QtGui.QIcon()
        icon26.addPixmap(QtGui.QPixmap(":/icons/images/spectrum-inverted.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionViewCompareSpectrum.setIcon(icon26)
        self.actionViewCompareSpectrum.setObjectName("actionViewCompareSpectrum")
        self.actionImportGroupMapping = QtWidgets.QAction(MainWindow)
        icon27 = QtGui.QIcon()
        icon27.addPixmap(QtGui.QPixmap(":/icons/images/import-mapping.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionImportGroupMapping.setIcon(icon27)
        self.actionImportGroupMapping.setObjectName("actionImportGroupMapping")
        self.actionSetNodesColor = QtWidgets.QAction(MainWindow)
        icon28 = QtGui.QIcon()
        icon28.addPixmap(QtGui.QPixmap(":/icons/images/color.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSetNodesColor.setIcon(icon28)
        self.actionSetNodesColor.setObjectName("actionSetNodesColor")
        self.actionSetNodesSize = QtWidgets.QAction(MainWindow)
        icon29 = QtGui.QIcon()
        icon29.addPixmap(QtGui.QPixmap(":/icons/images/node-size.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSetNodesSize.setIcon(icon29)
        self.actionSetNodesSize.setObjectName("actionSetNodesSize")
        self.actionImportUserDatabase = QtWidgets.QAction(MainWindow)
        icon30 = QtGui.QIcon()
        icon30.addPixmap(QtGui.QPixmap(":/icons/images/new-library-user.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionImportUserDatabase.setIcon(icon30)
        self.actionImportUserDatabase.setObjectName("actionImportUserDatabase")
        self.actionResetLayout = QtWidgets.QAction(MainWindow)
        icon31 = QtGui.QIcon()
        icon31.addPixmap(QtGui.QPixmap(":/icons/images/reset-layout.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionResetLayout.setIcon(icon31)
        self.actionResetLayout.setObjectName("actionResetLayout")
        self.actionOpenUserFolder = QtWidgets.QAction(MainWindow)
        icon32 = QtGui.QIcon()
        icon32.addPixmap(QtGui.QPixmap(":/icons/images/user-home.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpenUserFolder.setIcon(icon32)
        self.actionOpenUserFolder.setObjectName("actionOpenUserFolder")
        self.actionExportMetadata = QtWidgets.QAction(MainWindow)
        icon33 = QtGui.QIcon()
        icon33.addPixmap(QtGui.QPixmap(":/icons/images/export-metadata.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExportMetadata.setIcon(icon33)
        self.actionExportMetadata.setObjectName("actionExportMetadata")
        self.actionExportDatabaseResults = QtWidgets.QAction(MainWindow)
        self.actionExportDatabaseResults.setIcon(icon33)
        self.actionExportDatabaseResults.setObjectName("actionExportDatabaseResults")
        self.actionSetPieChartsVisibility = QtWidgets.QAction(MainWindow)
        self.actionSetPieChartsVisibility.setCheckable(True)
        self.actionSetPieChartsVisibility.setChecked(True)
        icon34 = QtGui.QIcon()
        icon34.addPixmap(QtGui.QPixmap(":/icons/images/node-pie.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSetPieChartsVisibility.setIcon(icon34)
        self.actionSetPieChartsVisibility.setObjectName("actionSetPieChartsVisibility")
        self.actionHideIsolatedNodes = QtWidgets.QAction(MainWindow)
        self.actionHideIsolatedNodes.setCheckable(True)
        icon35 = QtGui.QIcon()
        icon35.addPixmap(QtGui.QPixmap(":/icons/images/hide-isolated-nodes.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionHideIsolatedNodes.setIcon(icon35)
        self.actionHideIsolatedNodes.setObjectName("actionHideIsolatedNodes")
        self.actionRecentProjects = QtWidgets.QAction(MainWindow)
        self.actionRecentProjects.setObjectName("actionRecentProjects")
        self.actionCopyAsImage = QtWidgets.QAction(MainWindow)
        self.actionCopyAsImage.setIcon(icon17)
        self.actionCopyAsImage.setObjectName("actionCopyAsImage")
        self.actionAddNetworkView = QtWidgets.QAction(MainWindow)
        icon36 = QtGui.QIcon()
        icon36.addPixmap(QtGui.QPixmap(":/icons/images/list-add.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddNetworkView.setIcon(icon36)
        self.actionAddNetworkView.setObjectName("actionAddNetworkView")
        self.actionTours = QtWidgets.QAction(MainWindow)
        self.actionTours.setObjectName("actionTours")
        self.actionCheckUpdates = QtWidgets.QAction(MainWindow)
        self.actionCheckUpdates.setObjectName("actionCheckUpdates")
        self.actionShowPluginManager = QtWidgets.QAction(MainWindow)
        icon37 = QtGui.QIcon()
        icon37.addPixmap(QtGui.QPixmap(":/icons/images/plugin.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionShowPluginManager.setIcon(icon37)
        self.actionShowPluginManager.setObjectName("actionShowPluginManager")
        self.actionOpenPluginsFolder = QtWidgets.QAction(MainWindow)
        icon38 = QtGui.QIcon()
        icon38.addPixmap(QtGui.QPixmap(":/icons/images/plugins-home.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionOpenPluginsFolder.setIcon(icon38)
        self.actionOpenPluginsFolder.setObjectName("actionOpenPluginsFolder")
        self.action_Find_Standards_From_library = QtWidgets.QAction(MainWindow)
        self.action_Find_Standards_From_library.setObjectName("action_Find_Standards_From_library")
        self.actionFindStandards = QtWidgets.QAction(MainWindow)
        icon39 = QtGui.QIcon()
        icon39.addPixmap(QtGui.QPixmap(":/icons/images/library-query.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionFindStandards.setIcon(icon39)
        self.actionFindStandards.setObjectName("actionFindStandards")
        self.actionFindAnalogs = QtWidgets.QAction(MainWindow)
        self.actionFindAnalogs.setIcon(icon39)
        self.actionFindAnalogs.setObjectName("actionFindAnalogs")
        self.actionSelectItems = QtWidgets.QAction(MainWindow)
        self.actionSelectItems.setCheckable(True)
        icon40 = QtGui.QIcon()
        icon40.addPixmap(QtGui.QPixmap(":/icons/images/move-items.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSelectItems.setIcon(icon40)
        self.actionSelectItems.setObjectName("actionSelectItems")
        self.actionAddAnnotationLine = QtWidgets.QAction(MainWindow)
        self.actionAddAnnotationLine.setCheckable(True)
        icon41 = QtGui.QIcon()
        icon41.addPixmap(QtGui.QPixmap(":/icons/images/add-line.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddAnnotationLine.setIcon(icon41)
        self.actionAddAnnotationLine.setObjectName("actionAddAnnotationLine")
        self.actionAddAnnotationArrow = QtWidgets.QAction(MainWindow)
        self.actionAddAnnotationArrow.setCheckable(True)
        icon42 = QtGui.QIcon()
        icon42.addPixmap(QtGui.QPixmap(":/icons/images/add-arrow.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddAnnotationArrow.setIcon(icon42)
        self.actionAddAnnotationArrow.setObjectName("actionAddAnnotationArrow")
        self.actionAddAnnotationRect = QtWidgets.QAction(MainWindow)
        self.actionAddAnnotationRect.setCheckable(True)
        icon43 = QtGui.QIcon()
        icon43.addPixmap(QtGui.QPixmap(":/icons/images/add-rect.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddAnnotationRect.setIcon(icon43)
        self.actionAddAnnotationRect.setObjectName("actionAddAnnotationRect")
        self.actionAddAnnotationEllipse = QtWidgets.QAction(MainWindow)
        self.actionAddAnnotationEllipse.setCheckable(True)
        icon44 = QtGui.QIcon()
        icon44.addPixmap(QtGui.QPixmap(":/icons/images/add-ellipse.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddAnnotationEllipse.setIcon(icon44)
        self.actionAddAnnotationEllipse.setObjectName("actionAddAnnotationEllipse")
        self.actionAddAnnotationText = QtWidgets.QAction(MainWindow)
        self.actionAddAnnotationText.setCheckable(True)
        icon45 = QtGui.QIcon()
        icon45.addPixmap(QtGui.QPixmap(":/icons/images/add-text.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAddAnnotationText.setIcon(icon45)
        self.actionAddAnnotationText.setObjectName("actionAddAnnotationText")
        self.actionUndoAnnotations = QtWidgets.QAction(MainWindow)
        icon46 = QtGui.QIcon()
        icon46.addPixmap(QtGui.QPixmap(":/icons/images/edit-undo.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionUndoAnnotations.setIcon(icon46)
        self.actionUndoAnnotations.setObjectName("actionUndoAnnotations")
        self.actionRedoAnnotations = QtWidgets.QAction(MainWindow)
        icon47 = QtGui.QIcon()
        icon47.addPixmap(QtGui.QPixmap(":/icons/images/edit-redo.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionRedoAnnotations.setIcon(icon47)
        self.actionRedoAnnotations.setObjectName("actionRedoAnnotations")
        self.actionDeleteAnnotations = QtWidgets.QAction(MainWindow)
        icon48 = QtGui.QIcon()
        icon48.addPixmap(QtGui.QPixmap(":/icons/images/edit-delete.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDeleteAnnotations.setIcon(icon48)
        self.actionDeleteAnnotations.setObjectName("actionDeleteAnnotations")
        self.actionClearAnnotations = QtWidgets.QAction(MainWindow)
        icon49 = QtGui.QIcon()
        icon49.addPixmap(QtGui.QPixmap(":/icons/images/list-clear.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionClearAnnotations.setIcon(icon49)
        self.actionClearAnnotations.setObjectName("actionClearAnnotations")
        self.actionMetFrag = QtWidgets.QAction(MainWindow)
        icon50 = QtGui.QIcon()
        icon50.addPixmap(QtGui.QPixmap(":/icons/images/metfrag.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionMetFrag.setIcon(icon50)
        self.actionMetFrag.setObjectName("actionMetFrag")
        self.actionCFMID = QtWidgets.QAction(MainWindow)
        icon51 = QtGui.QIcon()
        icon51.addPixmap(QtGui.QPixmap(":/icons/images/cfm-id.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionCFMID.setIcon(icon51)
        self.actionCFMID.setObjectName("actionCFMID")
        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionRecentProjects)
        self.menuFile.addAction(self.actionProcessFile)
        self.menuFile.addAction(self.actionImportMetadata)
        self.menuFile.addAction(self.actionImportGroupMapping)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExportToCytoscape)
        self.menuFile.addAction(self.actionExportAsImage)
        self.menuFile.addAction(self.actionExportCurrentViewAsImage)
        self.menuFile.addAction(self.actionExportMetadata)
        self.menuFile.addAction(self.actionExportDatabaseResults)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.actionSaveAs)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)
        self.menuAbout.addAction(self.actionCheckUpdates)
        self.menuAbout.addSeparator()
        self.menuAbout.addAction(self.actionAbout)
        self.menuAbout.addAction(self.actionAboutQt)
        self.menuView.addAction(self.actionViewMiniMap)
        self.menuView.addAction(self.actionViewSpectrum)
        self.menuView.addAction(self.actionViewCompareSpectrum)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionFindStandards)
        self.menuView.addAction(self.actionFindAnalogs)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionZoomIn)
        self.menuView.addAction(self.actionZoomOut)
        self.menuView.addAction(self.actionZoomToFit)
        self.menuView.addAction(self.actionZoomSelectedRegion)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionFullScreen)
        self.menuView.addSeparator()
        self.menuSettings.addAction(self.actionPreferences)
        self.menuSettings.addAction(self.actionCurrentParameters)
        self.menuSettings.addSeparator()
        self.menuSettings.addAction(self.actionResetLayout)
        self.menuSettings.addAction(self.actionOpenUserFolder)
        self.menu_Network.addAction(self.actionLinkViews)
        self.menu_Network.addAction(self.actionNeighbors)
        self.menu_Network.addSeparator()
        self.menu_Network.addAction(self.actionHideSelected)
        self.menu_Network.addAction(self.actionShowAll)
        self.menu_Network.addAction(self.actionHideIsolatedNodes)
        self.menu_Network.addSeparator()
        self.menu_Network.addAction(self.actionSetPieChartsVisibility)
        self.menu_Databases.addAction(self.actionDownloadDatabases)
        self.menu_Databases.addAction(self.actionImportUserDatabase)
        self.menu_Databases.addSeparator()
        self.menu_Databases.addAction(self.actionMetFrag)
        self.menu_Databases.addAction(self.actionCFMID)
        self.menu_Databases.addSeparator()
        self.menu_Databases.addAction(self.actionViewDatabases)
        self.menu_Plugins.addAction(self.actionShowPluginManager)
        self.menu_Plugins.addAction(self.actionOpenPluginsFolder)
        self.menu_Annotations.addAction(self.actionSelectItems)
        self.menu_Annotations.addAction(self.actionAddAnnotationLine)
        self.menu_Annotations.addAction(self.actionAddAnnotationArrow)
        self.menu_Annotations.addAction(self.actionAddAnnotationRect)
        self.menu_Annotations.addAction(self.actionAddAnnotationEllipse)
        self.menu_Annotations.addAction(self.actionAddAnnotationText)
        self.menu_Annotations.addSeparator()
        self.menu_Annotations.addAction(self.actionUndoAnnotations)
        self.menu_Annotations.addAction(self.actionRedoAnnotations)
        self.menu_Annotations.addSeparator()
        self.menu_Annotations.addAction(self.actionDeleteAnnotations)
        self.menu_Annotations.addAction(self.actionClearAnnotations)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menu_Network.menuAction())
        self.menubar.addAction(self.menu_Databases.menuAction())
        self.menubar.addAction(self.menu_Annotations.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menu_Plugins.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
        self.tbFile.addAction(self.actionNewProject)
        self.tbFile.addAction(self.actionOpen)
        self.tbFile.addAction(self.actionSave)
        self.tbFile.addAction(self.actionSaveAs)
        self.tbFile.addSeparator()
        self.tbFile.addAction(self.actionProcessFile)
        self.tbFile.addAction(self.actionImportMetadata)
        self.tbFile.addAction(self.actionImportGroupMapping)
        self.tbFile.addSeparator()
        self.tbFile.addAction(self.actionAddNetworkView)
        self.tbFile.addSeparator()
        self.tbFile.addAction(self.actionCurrentParameters)
        self.tbFile.addAction(self.actionPreferences)
        self.tbView.addAction(self.actionZoomIn)
        self.tbView.addAction(self.actionZoomOut)
        self.tbView.addAction(self.actionZoomToFit)
        self.tbView.addAction(self.actionZoomSelectedRegion)
        self.tbView.addSeparator()
        self.tbView.addAction(self.actionFullScreen)
        self.tbNetwork.addAction(self.actionLinkViews)
        self.tbNetwork.addAction(self.actionNeighbors)
        self.tbNetwork.addSeparator()
        self.tbNetwork.addAction(self.actionHideSelected)
        self.tbNetwork.addAction(self.actionShowAll)
        self.tbNetwork.addAction(self.actionHideIsolatedNodes)
        self.tbNetwork.addSeparator()
        self.tbNetwork.addAction(self.actionSetNodesColor)
        self.tbNetwork.addAction(self.actionSetNodesSize)
        self.tbNetwork.addSeparator()
        self.tbNetwork.addAction(self.actionSetPieChartsVisibility)
        self.tbExport.addAction(self.actionExportToCytoscape)
        self.tbExport.addAction(self.actionExportAsImage)
        self.tbExport.addAction(self.actionExportCurrentViewAsImage)
        self.tbExport.addSeparator()
        self.tbExport.addAction(self.actionExportMetadata)
        self.tbExport.addAction(self.actionExportDatabaseResults)
        self.tbDatabase.addAction(self.actionDownloadDatabases)
        self.tbDatabase.addAction(self.actionImportUserDatabase)
        self.tbDatabase.addSeparator()
        self.tbDatabase.addAction(self.actionViewDatabases)
        self.tbAnnotations.addAction(self.actionSelectItems)
        self.tbAnnotations.addAction(self.actionAddAnnotationLine)
        self.tbAnnotations.addAction(self.actionAddAnnotationArrow)
        self.tbAnnotations.addAction(self.actionAddAnnotationRect)
        self.tbAnnotations.addAction(self.actionAddAnnotationEllipse)
        self.tbAnnotations.addAction(self.actionAddAnnotationText)
        self.tbAnnotations.addSeparator()
        self.tbAnnotations.addAction(self.actionUndoAnnotations)
        self.tbAnnotations.addAction(self.actionRedoAnnotations)
        self.tbAnnotations.addSeparator()
        self.tbAnnotations.addAction(self.actionDeleteAnnotations)
        self.tbAnnotations.addAction(self.actionClearAnnotations)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        self.menuFile.setTitle(QtWidgets.QApplication.translate("MainWindow", "&File", None, -1))
        self.menuAbout.setTitle(QtWidgets.QApplication.translate("MainWindow", "&Help", None, -1))
        self.menuView.setTitle(QtWidgets.QApplication.translate("MainWindow", "&View", None, -1))
        self.menuSettings.setTitle(QtWidgets.QApplication.translate("MainWindow", "&Settings", None, -1))
        self.menu_Network.setTitle(QtWidgets.QApplication.translate("MainWindow", "&Network", None, -1))
        self.menu_Databases.setTitle(QtWidgets.QApplication.translate("MainWindow", "&Databases", None, -1))
        self.menu_Plugins.setTitle(QtWidgets.QApplication.translate("MainWindow", "&Plugins", None, -1))
        self.menu_Annotations.setTitle(QtWidgets.QApplication.translate("MainWindow", "&Annotations", None, -1))
        self.tbFile.setWindowTitle(QtWidgets.QApplication.translate("MainWindow", "File", None, -1))
        self.tbView.setWindowTitle(QtWidgets.QApplication.translate("MainWindow", "View", None, -1))
        self.tbNetwork.setWindowTitle(QtWidgets.QApplication.translate("MainWindow", "Network", None, -1))
        self.tbExport.setWindowTitle(QtWidgets.QApplication.translate("MainWindow", "Export", None, -1))
        self.tbDatabase.setWindowTitle(QtWidgets.QApplication.translate("MainWindow", "Database", None, -1))
        self.tbAnnotations.setWindowTitle(QtWidgets.QApplication.translate("MainWindow", "Annotations", None, -1))
        self.tbAnnotations.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Select and move items", None, -1))
        self.tbAnnotations.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Select and move items", None, -1))
        self.tbSearch.setWindowTitle(QtWidgets.QApplication.translate("MainWindow", "Search", None, -1))
        self.actionProcessFile.setText(QtWidgets.QApplication.translate("MainWindow", "&Import spectra list...", None, -1))
        self.actionProcessFile.setIconText(QtWidgets.QApplication.translate("MainWindow", "Import data", None, -1))
        self.actionProcessFile.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Import a spectra list and compute scores", None, -1))
        self.actionProcessFile.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Import a spectra list and compute scores", None, -1))
        self.actionQuit.setText(QtWidgets.QApplication.translate("MainWindow", "&Quit", None, -1))
        self.actionQuit.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+Q", None, -1))
        self.actionAbout.setText(QtWidgets.QApplication.translate("MainWindow", "&About...", None, -1))
        self.actionAbout.setShortcut(QtWidgets.QApplication.translate("MainWindow", "F1", None, -1))
        self.actionAboutQt.setText(QtWidgets.QApplication.translate("MainWindow", "About &Qt...", None, -1))
        self.actionOpen.setText(QtWidgets.QApplication.translate("MainWindow", "&Open Project...", None, -1))
        self.actionOpen.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Load a previously saved project file", None, -1))
        self.actionOpen.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Load a previously saved project file", None, -1))
        self.actionOpen.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+O", None, -1))
        self.actionSave.setText(QtWidgets.QApplication.translate("MainWindow", "&Save", None, -1))
        self.actionSave.setIconText(QtWidgets.QApplication.translate("MainWindow", "Save", None, -1))
        self.actionSave.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Save project", None, -1))
        self.actionSave.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Save project", None, -1))
        self.actionSave.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+S", None, -1))
        self.actionSaveAs.setText(QtWidgets.QApplication.translate("MainWindow", "Sa&ve as...", None, -1))
        self.actionSaveAs.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Save project as", None, -1))
        self.actionSaveAs.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Save project as", None, -1))
        self.actionSaveAs.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+Shift+S", None, -1))
        self.actionZoomIn.setText(QtWidgets.QApplication.translate("MainWindow", "Zoom &in", None, -1))
        self.actionZoomIn.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Zoom in", None, -1))
        self.actionZoomIn.setShortcut(QtWidgets.QApplication.translate("MainWindow", "+", None, -1))
        self.actionZoomOut.setText(QtWidgets.QApplication.translate("MainWindow", "Zoom &out", None, -1))
        self.actionZoomOut.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Zoom out", None, -1))
        self.actionZoomOut.setShortcut(QtWidgets.QApplication.translate("MainWindow", "-", None, -1))
        self.actionZoomToFit.setText(QtWidgets.QApplication.translate("MainWindow", "Zoom to &fit", None, -1))
        self.actionZoomToFit.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Zoom to fit entire network in the view", None, -1))
        self.actionZoomToFit.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Zoom to fit entire network in the view", None, -1))
        self.actionZoomToFit.setShortcut(QtWidgets.QApplication.translate("MainWindow", "*", None, -1))
        self.actionZoomSelectedRegion.setText(QtWidgets.QApplication.translate("MainWindow", "Zoom to &selected region", None, -1))
        self.actionZoomSelectedRegion.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Zoom to the selected region", None, -1))
        self.actionZoomSelectedRegion.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Zoom to the selected region", None, -1))
        self.actionZoomSelectedRegion.setShortcut(QtWidgets.QApplication.translate("MainWindow", "/", None, -1))
        self.actionFullScreen.setText(QtWidgets.QApplication.translate("MainWindow", "&FullScreen", None, -1))
        self.actionFullScreen.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Switch to fullscreen/normal", None, -1))
        self.actionFullScreen.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Switch to fullscreen/normal", None, -1))
        self.actionFullScreen.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Alt+Return", None, -1))
        self.actionZoomReset.setText(QtWidgets.QApplication.translate("MainWindow", "&Reset Zoom ", None, -1))
        self.actionZoomReset.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Reset Zoom", None, -1))
        self.actionZoomReset.setShortcut(QtWidgets.QApplication.translate("MainWindow", "0", None, -1))
        self.actionShowAll.setText(QtWidgets.QApplication.translate("MainWindow", "&Show all", None, -1))
        self.actionShowAll.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Show all nodes and edges", None, -1))
        self.actionShowAll.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Show all nodes and edges in the current network", None, -1))
        self.actionShowAll.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Alt+A", None, -1))
        self.actionHideSelected.setText(QtWidgets.QApplication.translate("MainWindow", "&Hide selected nodes and edges", None, -1))
        self.actionHideSelected.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Hide selected nodes and edges of the current network", None, -1))
        self.actionHideSelected.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Hide selected nodes and edges of the current network", None, -1))
        self.actionHideSelected.setShortcut(QtWidgets.QApplication.translate("MainWindow", "H", None, -1))
        self.actionNeighbors.setText(QtWidgets.QApplication.translate("MainWindow", "&Neighbors", None, -1))
        self.actionNeighbors.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Select first neighbors of currently selected nodes", None, -1))
        self.actionNeighbors.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Select first neighbors of currently selected nodes", None, -1))
        self.actionNeighbors.setShortcut(QtWidgets.QApplication.translate("MainWindow", "N", None, -1))
        self.actionExportToCytoscape.setText(QtWidgets.QApplication.translate("MainWindow", "Export to &Cytoscape", None, -1))
        self.actionExportToCytoscape.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Export current network to cytoscape", None, -1))
        self.actionExportToCytoscape.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Export current network to cytoscape", None, -1))
        self.actionExportToCytoscape.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+E", None, -1))
        self.actionExportAsImage.setText(QtWidgets.QApplication.translate("MainWindow", "Export As &Image...", None, -1))
        self.actionExportAsImage.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Export current network as image", None, -1))
        self.actionExportAsImage.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Export current network as image", None, -1))
        self.actionExportAsImage.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+Shift+I", None, -1))
        self.actionLinkViews.setText(QtWidgets.QApplication.translate("MainWindow", "&Link views", None, -1))
        self.actionLinkViews.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Link selection between views", None, -1))
        self.actionLinkViews.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Link selection between views", None, -1))
        self.actionLinkViews.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+L", None, -1))
        self.actionDownloadDatabases.setText(QtWidgets.QApplication.translate("MainWindow", "&Download databases...", None, -1))
        self.actionDownloadDatabases.setIconText(QtWidgets.QApplication.translate("MainWindow", "Download databases", None, -1))
        self.actionDownloadDatabases.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Download databases from external sources", None, -1))
        self.actionDownloadDatabases.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Download databases from external sources", None, -1))
        self.actionDownloadDatabases.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Alt+D", None, -1))
        self.actionViewDatabases.setText(QtWidgets.QApplication.translate("MainWindow", "&View databases", None, -1))
        self.actionViewDatabases.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Explore databases", None, -1))
        self.actionViewDatabases.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Explore databases", None, -1))
        self.actionViewDatabases.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+D", None, -1))
        self.actionCurrentParameters.setText(QtWidgets.QApplication.translate("MainWindow", "Current &Parameters...", None, -1))
        self.actionCurrentParameters.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Show Current Parameters", None, -1))
        self.actionCurrentParameters.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Show Current Parameters", None, -1))
        self.actionImportMetadata.setText(QtWidgets.QApplication.translate("MainWindow", "Import &Metadata...", None, -1))
        self.actionImportMetadata.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Import nodes metadata", None, -1))
        self.actionImportMetadata.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Import nodes metadata", None, -1))
        self.actionImportMetadata.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+M", None, -1))
        self.actionNewProject.setText(QtWidgets.QApplication.translate("MainWindow", "&New project", None, -1))
        self.actionNewProject.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Create a new project", None, -1))
        self.actionNewProject.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Create a new project", None, -1))
        self.actionNewProject.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+N", None, -1))
        self.actionPreferences.setText(QtWidgets.QApplication.translate("MainWindow", "&Preferences...", None, -1))
        self.actionPreferences.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Change application settings", None, -1))
        self.actionPreferences.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Change application settings", None, -1))
        self.actionExportCurrentViewAsImage.setText(QtWidgets.QApplication.translate("MainWindow", "Export Current &View As Image...", None, -1))
        self.actionExportCurrentViewAsImage.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Export current view of network as image", None, -1))
        self.actionExportCurrentViewAsImage.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Export current view of network as image", None, -1))
        self.actionExportCurrentViewAsImage.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+I", None, -1))
        self.actionViewMiniMap.setText(QtWidgets.QApplication.translate("MainWindow", "Mini &map", None, -1))
        self.actionViewMiniMap.setToolTip(QtWidgets.QApplication.translate("MainWindow", "View/hide Mini map on current\'s view", None, -1))
        self.actionViewMiniMap.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "View/hide Mini map on current\'s network", None, -1))
        self.actionViewMiniMap.setShortcut(QtWidgets.QApplication.translate("MainWindow", "M", None, -1))
        self.actionViewSpectrum.setText(QtWidgets.QApplication.translate("MainWindow", "&Spectrum", None, -1))
        self.actionViewSpectrum.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Show the spectrum associated to the selected node", None, -1))
        self.actionViewSpectrum.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Show the spectrum associated to the selected node", None, -1))
        self.actionViewSpectrum.setShortcut(QtWidgets.QApplication.translate("MainWindow", "S", None, -1))
        self.actionViewCompareSpectrum.setText(QtWidgets.QApplication.translate("MainWindow", "&Compare Spectrum", None, -1))
        self.actionViewCompareSpectrum.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Compare the spectrum associated to the selected node to another one", None, -1))
        self.actionViewCompareSpectrum.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Compare the spectrum associated to the selected node to another one", None, -1))
        self.actionViewCompareSpectrum.setShortcut(QtWidgets.QApplication.translate("MainWindow", "C", None, -1))
        self.actionImportGroupMapping.setText(QtWidgets.QApplication.translate("MainWindow", "Import &Group Mapping...", None, -1))
        self.actionImportGroupMapping.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Import metadata\'s group mapping", None, -1))
        self.actionImportGroupMapping.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Import metadata\'s group mapping", None, -1))
        self.actionImportGroupMapping.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+G", None, -1))
        self.actionSetNodesColor.setText(QtWidgets.QApplication.translate("MainWindow", "Set selected nodes &color", None, -1))
        self.actionSetNodesColor.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Set selected nodes color", None, -1))
        self.actionSetNodesColor.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Set selected nodes color", None, -1))
        self.actionSetNodesSize.setText(QtWidgets.QApplication.translate("MainWindow", "Set selected nodes &size", None, -1))
        self.actionSetNodesSize.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Set selected nodes size", None, -1))
        self.actionSetNodesSize.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Set selected nodes size", None, -1))
        self.actionImportUserDatabase.setText(QtWidgets.QApplication.translate("MainWindow", "Import &user database...", None, -1))
        self.actionImportUserDatabase.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Import user database from local file", None, -1))
        self.actionImportUserDatabase.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Import user database from local file", None, -1))
        self.actionImportUserDatabase.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Alt+U", None, -1))
        self.actionResetLayout.setText(QtWidgets.QApplication.translate("MainWindow", "&Reset Layout", None, -1))
        self.actionResetLayout.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Reset positions of docked widgets", None, -1))
        self.actionResetLayout.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Reset positions of docked widgets", None, -1))
        self.actionOpenUserFolder.setText(QtWidgets.QApplication.translate("MainWindow", "&Open user\'s folder", None, -1))
        self.actionOpenUserFolder.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Open user\'s folder", None, -1))
        self.actionExportMetadata.setText(QtWidgets.QApplication.translate("MainWindow", "Export &Metadata as CSV...", None, -1))
        self.actionExportMetadata.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Export data of nodes table in a text file (Comma Separated Values format)", None, -1))
        self.actionExportMetadata.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Export data of nodes table in a text file (Comma Separated Values format)", None, -1))
        self.actionExportDatabaseResults.setText(QtWidgets.QApplication.translate("MainWindow", "Export &Database results...", None, -1))
        self.actionExportDatabaseResults.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Export Database results", None, -1))
        self.actionSetPieChartsVisibility.setText(QtWidgets.QApplication.translate("MainWindow", "Show &pie charts", None, -1))
        self.actionSetPieChartsVisibility.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Temporarily show/hide pie charts", None, -1))
        self.actionSetPieChartsVisibility.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Temporarily show/hide pie charts", None, -1))
        self.actionSetPieChartsVisibility.setShortcut(QtWidgets.QApplication.translate("MainWindow", "P", None, -1))
        self.actionHideIsolatedNodes.setText(QtWidgets.QApplication.translate("MainWindow", "Show/Hide &Isolated Nodes", None, -1))
        self.actionHideIsolatedNodes.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Show/Hide Isolated Nodes", None, -1))
        self.actionHideIsolatedNodes.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Show/Hide Isolated Nodes", None, -1))
        self.actionHideIsolatedNodes.setShortcut(QtWidgets.QApplication.translate("MainWindow", "I", None, -1))
        self.actionRecentProjects.setText(QtWidgets.QApplication.translate("MainWindow", "Recent Projects", None, -1))
        self.actionRecentProjects.setToolTip(QtWidgets.QApplication.translate("MainWindow", "List recently opened projects", None, -1))
        self.actionCopyAsImage.setText(QtWidgets.QApplication.translate("MainWindow", "&Copy Network Image", None, -1))
        self.actionCopyAsImage.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Copy current network image to clipboard", None, -1))
        self.actionCopyAsImage.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Export current network as image", None, -1))
        self.actionCopyAsImage.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+Shift+C", None, -1))
        self.actionAddNetworkView.setText(QtWidgets.QApplication.translate("MainWindow", "Add Network View", None, -1))
        self.actionAddNetworkView.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Add Network View", None, -1))
        self.actionAddNetworkView.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Add Network View", None, -1))
        self.actionTours.setText(QtWidgets.QApplication.translate("MainWindow", "Tours", None, -1))
        self.actionCheckUpdates.setText(QtWidgets.QApplication.translate("MainWindow", "&Check for updates", None, -1))
        self.actionShowPluginManager.setText(QtWidgets.QApplication.translate("MainWindow", "Plugins &manager...", None, -1))
        self.actionOpenPluginsFolder.setText(QtWidgets.QApplication.translate("MainWindow", "&Open plugins folder", None, -1))
        self.actionOpenPluginsFolder.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Open plugins folder", None, -1))
        self.action_Find_Standards_From_library.setText(QtWidgets.QApplication.translate("MainWindow", "&Find Standards From library", None, -1))
        self.actionFindStandards.setText(QtWidgets.QApplication.translate("MainWindow", "Find standards in library...", None, -1))
        self.actionFindStandards.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Search for known spectra in library similar to the selected nodes\' spectra with same precursor ion", None, -1))
        self.actionFindStandards.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Search for known spectra in library similar to the selected nodes\' spectra with same precursor ion", None, -1))
        self.actionFindStandards.setShortcut(QtWidgets.QApplication.translate("MainWindow", "F", None, -1))
        self.actionFindAnalogs.setText(QtWidgets.QApplication.translate("MainWindow", "Find analogs in library...", None, -1))
        self.actionFindAnalogs.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Search for known spectra in library similar to the selected nodes\' spectra with different precursor ion", None, -1))
        self.actionFindAnalogs.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Search for known spectra in library similar to the selected nodes\' spectra with different precursor ion", None, -1))
        self.actionFindAnalogs.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Shift+F", None, -1))
        self.actionSelectItems.setText(QtWidgets.QApplication.translate("MainWindow", "Select Items", None, -1))
        self.actionSelectItems.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Select Items", None, -1))
        self.actionSelectItems.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Select Items", None, -1))
        self.actionSelectItems.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Esc", None, -1))
        self.actionAddAnnotationLine.setText(QtWidgets.QApplication.translate("MainWindow", "Add Annotation Line", None, -1))
        self.actionAddAnnotationLine.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Add a line annotation", None, -1))
        self.actionAddAnnotationLine.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Add a line annotation", None, -1))
        self.actionAddAnnotationLine.setShortcut(QtWidgets.QApplication.translate("MainWindow", "L", None, -1))
        self.actionAddAnnotationArrow.setText(QtWidgets.QApplication.translate("MainWindow", "Add Annotation Arrow", None, -1))
        self.actionAddAnnotationArrow.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Add an arrow annotation", None, -1))
        self.actionAddAnnotationArrow.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Add an arrow annotation", None, -1))
        self.actionAddAnnotationArrow.setShortcut(QtWidgets.QApplication.translate("MainWindow", "A", None, -1))
        self.actionAddAnnotationRect.setText(QtWidgets.QApplication.translate("MainWindow", "Add Annotation Rectangle", None, -1))
        self.actionAddAnnotationRect.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Add a rectangle annotation", None, -1))
        self.actionAddAnnotationRect.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Add a rectangle annotation", None, -1))
        self.actionAddAnnotationRect.setShortcut(QtWidgets.QApplication.translate("MainWindow", "R", None, -1))
        self.actionAddAnnotationEllipse.setText(QtWidgets.QApplication.translate("MainWindow", "Add Annotation Ellipse", None, -1))
        self.actionAddAnnotationEllipse.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Add an elliptic annotation", None, -1))
        self.actionAddAnnotationEllipse.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Add an elliptic annotation", None, -1))
        self.actionAddAnnotationEllipse.setShortcut(QtWidgets.QApplication.translate("MainWindow", "E", None, -1))
        self.actionAddAnnotationText.setText(QtWidgets.QApplication.translate("MainWindow", "Add Annotation Text", None, -1))
        self.actionAddAnnotationText.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Add a textual annotation", None, -1))
        self.actionAddAnnotationText.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Add a textual annotation", None, -1))
        self.actionAddAnnotationText.setShortcut(QtWidgets.QApplication.translate("MainWindow", "T", None, -1))
        self.actionUndoAnnotations.setText(QtWidgets.QApplication.translate("MainWindow", "Undo", None, -1))
        self.actionUndoAnnotations.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Undo last annotation action", None, -1))
        self.actionUndoAnnotations.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Undo last annotation action", None, -1))
        self.actionUndoAnnotations.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+Z", None, -1))
        self.actionRedoAnnotations.setText(QtWidgets.QApplication.translate("MainWindow", "Redo", None, -1))
        self.actionRedoAnnotations.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Redo last cancelled annotation action", None, -1))
        self.actionRedoAnnotations.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Redo last cancelled annotation action", None, -1))
        self.actionRedoAnnotations.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Ctrl+Shift+Z", None, -1))
        self.actionDeleteAnnotations.setText(QtWidgets.QApplication.translate("MainWindow", "Delete Annotations", None, -1))
        self.actionDeleteAnnotations.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Delete Selected annotations", None, -1))
        self.actionDeleteAnnotations.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Delete Selected annotations", None, -1))
        self.actionDeleteAnnotations.setShortcut(QtWidgets.QApplication.translate("MainWindow", "Del", None, -1))
        self.actionClearAnnotations.setText(QtWidgets.QApplication.translate("MainWindow", "Clear Annotations", None, -1))
        self.actionClearAnnotations.setToolTip(QtWidgets.QApplication.translate("MainWindow", "Clear Annotations", None, -1))
        self.actionClearAnnotations.setStatusTip(QtWidgets.QApplication.translate("MainWindow", "Delete Selected annotations", None, -1))
        self.actionMetFrag.setText(QtWidgets.QApplication.translate("MainWindow", "MetFrag...", None, -1))
        self.actionCFMID.setText(QtWidgets.QApplication.translate("MainWindow", "CFM-ID...", None, -1))
        self.actionCFMID.setToolTip(QtWidgets.QApplication.translate("MainWindow", "CFM-ID", None, -1))

import ui_rc
